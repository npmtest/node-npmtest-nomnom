{"/home/travis/build/npmtest/node-npmtest-nomnom/test.js":"/* istanbul instrument in package npmtest_nomnom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nomnom/lib.npmtest_nomnom.js":"/* istanbul instrument in package npmtest_nomnom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nomnom = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nomnom = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nomnom/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nomnom && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nomnom */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nomnom\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nomnom.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nomnom.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nomnom.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nomnom.__dirname + '/lib.npmtest_nomnom.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nomnom/node_modules/nomnom/nomnom.js":"var _ = require(\"underscore\"), chalk = require('chalk');\n\n\nfunction ArgParser() {\n   this.commands = {};  // expected commands\n   this.specs = {};     // option specifications\n}\n\nArgParser.prototype = {\n  /* Add a command to the expected commands */\n  command : function(name) {\n    var command;\n    if (name) {\n      command = this.commands[name] = {\n        name: name,\n        specs: {}\n      };\n    }\n    else {\n      command = this.fallback = {\n        specs: {}\n      };\n    }\n\n    // facilitates command('name').options().cb().help()\n    var chain = {\n      options : function(specs) {\n        command.specs = specs;\n        return chain;\n      },\n      opts : function(specs) {\n        // old API\n        return this.options(specs);\n      },\n      option : function(name, spec) {\n        command.specs[name] = spec;\n        return chain;\n      },\n      callback : function(cb) {\n        command.cb = cb;\n        return chain;\n      },\n      help : function(help) {\n        command.help = help;\n        return chain;\n      },\n      usage : function(usage) {\n        command._usage = usage;\n        return chain;\n      }\n    };\n    return chain;\n  },\n\n  nocommand : function() {\n    return this.command();\n  },\n\n  options : function(specs) {\n    this.specs = specs;\n    return this;\n  },\n\n  opts : function(specs) {\n    // old API\n    return this.options(specs);\n  },\n\n  globalOpts : function(specs) {\n    // old API\n    return this.options(specs);\n  },\n\n  option : function(name, spec) {\n    this.specs[name] = spec;\n    return this;\n  },\n\n  usage : function(usage) {\n    this._usage = usage;\n    return this;\n  },\n\n  printer : function(print) {\n    this.print = print;\n    return this;\n  },\n\n  script : function(script) {\n    this._script = script;\n    return this;\n  },\n\n  scriptName : function(script) {\n    // old API\n    return this.script(script);\n  },\n\n  help : function(help) {\n    this._help = help;\n    return this;\n  },\n\n  colors: function() {\n    // deprecated - colors are on by default now\n    return this;\n  },\n\n  nocolors : function() {\n    this._nocolors = true;\n    return this;\n  },\n\n  parseArgs : function(argv) {\n    // old API\n    return this.parse(argv);\n  },\n\n  nom : function(argv) {\n    return this.parse(argv);\n  },\n\n  parse : function(argv) {\n    this.print = this.print || function(str, code) {\n      console.log(str);\n      process.exit(code || 0);\n    };\n    this._help = this._help || \"\";\n    this._script = this._script || process.argv[0] + \" \"\n          + require('path').basename(process.argv[1]);\n    this.specs = this.specs || {};\n\n    var argv = argv || process.argv.slice(2);\n\n    var arg = Arg(argv[0]).isValue && argv[0],\n        command = arg && this.commands[arg],\n        commandExpected = !_(this.commands).isEmpty();\n\n    if (commandExpected) {\n       if (command) {\n          _(this.specs).extend(command.specs);\n          this._script += \" \" + command.name;\n          if (command.help) {\n            this._help = command.help;\n          }\n          this.command = command;\n       }\n       else if (arg) {\n          return this.print(this._script + \": no such command '\" + arg + \"'\", 1);\n       }\n       else {\n          // no command but command expected e.g. 'git -v'\n          var helpStringBuilder = {\n            list : function() {\n               return 'one of: ' + _(this.commands).keys().join(\", \");\n            },\n            twoColumn : function() {\n              // find the longest command name to ensure horizontal alignment\n              var maxLength = _(this.commands).max(function (cmd) {\n                return cmd.name.length;\n              }).name.length;\n\n              // create the two column text strings\n              var cmdHelp = _.map(this.commands, function(cmd, name) {\n                var diff = maxLength - name.length;\n                var pad = new Array(diff + 4).join(\" \");\n                return \"  \" + [ name, pad, cmd.help ].join(\" \");\n              });\n              return \"\\n\" + cmdHelp.join(\"\\n\");\n            }\n          };\n\n          // if there are a small number of commands and all have help strings,\n          // display them in a two column table; otherwise use the brief version.\n          // The arbitrary choice of \"20\" comes from the number commands git\n          // displays as \"common commands\"\n          var helpType = 'list';\n          if (_(this.commands).size() <= 20) {\n            if (_(this.commands).every(function (cmd) { return cmd.help; })) {\n                helpType = 'twoColumn';\n            }\n          }\n\n          this.specs.command = {\n            position: 0,\n            help: helpStringBuilder[helpType].call(this)\n          }\n\n          if (this.fallback) {\n            _(this.specs).extend(this.fallback.specs);\n            this._help = this.fallback.help;\n          } else {\n            this.specs.command.required = true;\n          }\n       }\n    }\n\n    if (this.specs.length === undefined) {\n      // specs is a hash not an array\n      this.specs = _(this.specs).map(function(opt, name) {\n        opt.name = name;\n        return opt;\n      });\n    }\n    this.specs = this.specs.map(function(opt) {\n      return Opt(opt);\n    });\n\n    if (argv.indexOf(\"--help\") >= 0 || argv.indexOf(\"-h\") >= 0) {\n      return this.print(this.getUsage());\n    }\n\n    var options = {};\n    var args = argv.map(function(arg) {\n      return Arg(arg);\n    })\n    .concat(Arg());\n\n    var positionals = [];\n\n    /* parse the args */\n    var that = this;\n    args.reduce(function(arg, val) {\n      /* positional */\n      if (arg.isValue) {\n        positionals.push(arg.value);\n      }\n      else if (arg.chars) {\n        var last = arg.chars.pop();\n\n        /* -cfv */\n        (arg.chars).forEach(function(ch) {\n          that.setOption(options, ch, true);\n        });\n\n        /* -v key */\n        if (!that.opt(last).flag) {\n           if (val.isValue)  {\n              that.setOption(options, last, val.value);\n              return Arg(); // skip next turn - swallow arg\n           }\n           else {\n              that.print(\"'-\" + (that.opt(last).name || last) + \"'\"\n                + \" expects a value\\n\\n\" + that.getUsage(), 1);\n           }\n        }\n        else {\n          /* -v */\n          that.setOption(options, last, true);\n        }\n\n      }\n      else if (arg.full) {\n        var value = arg.value;\n\n        /* --key */\n        if (value === undefined) {\n          /* --key value */\n          if (!that.opt(arg.full).flag) {\n            if (val.isValue) {\n              that.setOption(options, arg.full, val.value);\n              return Arg();\n            }\n            else {\n              that.print(\"'--\" + (that.opt(arg.full).name || arg.full) + \"'\"\n                + \" expects a value\\n\\n\" + that.getUsage(), 1);\n            }\n          }\n          else {\n            /* --flag */\n            value = true;\n          }\n        }\n        that.setOption(options, arg.full, value);\n      }\n      return val;\n    });\n\n    positionals.forEach(function(pos, index) {\n      this.setOption(options, index, pos);\n    }, this);\n\n    options._ = positionals;\n\n    this.specs.forEach(function(opt) {\n      if (opt.default !== undefined && options[opt.name] === undefined) {\n        options[opt.name] = opt.default;\n      }\n    }, this);\n\n    // exit if required arg isn't present\n    this.specs.forEach(function(opt) {\n      if (opt.required && options[opt.name] === undefined) {\n         var msg = opt.name + \" argument is required\";\n         msg = this._nocolors ? msg : chalk.red(msg);\n\n         this.print(\"\\n\" + msg + \"\\n\" + this.getUsage(), 1);\n      }\n    }, this);\n\n    if (command && command.cb) {\n      command.cb(options);\n    }\n    else if (this.fallback && this.fallback.cb) {\n      this.fallback.cb(options);\n    }\n\n    return options;\n  },\n\n  getUsage : function() {\n    if (this.command && this.command._usage) {\n      return this.command._usage;\n    }\n    else if (this.fallback && this.fallback._usage) {\n      return this.fallback._usage;\n    }\n    if (this._usage) {\n      return this._usage;\n    }\n\n    // todo: use a template\n    var str = \"\\n\"\n    if (!this._nocolors) {\n      str += chalk.bold(\"Usage:\");\n    }\n    else {\n      str += \"Usage:\";\n    }\n    str += \" \" + this._script;\n\n    var positionals = _(this.specs).select(function(opt) {\n      return opt.position != undefined;\n    })\n    positionals = _(positionals).sortBy(function(opt) {\n      return opt.position;\n    });\n    var options = _(this.specs).select(function(opt) {\n      return opt.position === undefined;\n    });\n\n    // assume there are no gaps in the specified pos. args\n    positionals.forEach(function(pos) {\n      str += \" \";\n      var posStr = pos.string;\n      if (!posStr) {\n        posStr = pos.name || \"arg\" + pos.position;\n        if (pos.required) {\n            posStr = \"<\" + posStr + \">\";\n        } else {\n            posStr = \"[\" + posStr + \"]\";\n        }\n        if (pos.list) {\n          posStr += \"...\";\n        }\n      }\n      str += posStr;\n    });\n\n    if (options.length) {\n      if (!this._nocolors) {\n        // must be a better way to do this\n        str += chalk.blue(\" [options]\");\n      }\n      else {\n        str += \" [options]\";\n      }\n    }\n\n    if (options.length || positionals.length) {\n      str += \"\\n\\n\";\n    }\n\n    function spaces(length) {\n      var spaces = \"\";\n      for (var i = 0; i < length; i++) {\n        spaces += \" \";\n      }\n      return spaces;\n    }\n    var longest = positionals.reduce(function(max, pos) {\n      return pos.name.length > max ? pos.name.length : max;\n    }, 0);\n\n    positionals.forEach(function(pos) {\n      var posStr = pos.string || pos.name;\n      str += posStr + spaces(longest - posStr.length) + \"     \";\n      if (!this._nocolors) {\n        str += chalk.grey(pos.help || \"\")\n      }\n      else {\n        str += (pos.help || \"\")\n      }\n      str += \"\\n\";\n    }, this);\n    if (positionals.length && options.length) {\n      str += \"\\n\";\n    }\n\n    if (options.length) {\n      if (!this._nocolors) {\n        str += chalk.blue(\"Options:\");\n      }\n      else {\n        str += \"Options:\";\n      }\n      str += \"\\n\"\n\n      var longest = options.reduce(function(max, opt) {\n        return opt.string.length > max && !opt.hidden ? opt.string.length : max;\n      }, 0);\n\n      options.forEach(function(opt) {\n        if (!opt.hidden) {\n          str += \"   \" + opt.string + spaces(longest - opt.string.length) + \"   \";\n\n          var defaults = (opt.default != null ? \"  [\" + opt.default + \"]\" : \"\");\n          var help = opt.help ? opt.help + defaults : \"\";\n          str += this._nocolors ? help: chalk.grey(help);\n\n          str += \"\\n\";\n        }\n      }, this);\n    }\n\n    if (this._help) {\n      str += \"\\n\" + this._help;\n    }\n    return str;\n  }\n};\n\nArgParser.prototype.opt = function(arg) {\n  // get the specified opt for this parsed arg\n  var match = Opt({});\n  this.specs.forEach(function(opt) {\n    if (opt.matches(arg)) {\n       match = opt;\n    }\n  });\n  return match;\n};\n\nArgParser.prototype.setOption = function(options, arg, value) {\n  var option = this.opt(arg);\n  if (option.callback) {\n    var message = option.callback(value);\n\n    if (typeof message == \"string\") {\n      this.print(message, 1);\n    }\n  }\n\n  if (option.type != \"string\") {\n     try {\n       // infer type by JSON parsing the string\n       value = JSON.parse(value)\n     }\n     catch(e) {}\n  }\n\n  if (option.transform) {\n     value = option.transform(value);\n  }\n\n  var name = option.name || arg;\n  if (option.choices && option.choices.indexOf(value) == -1) {\n     this.print(name + \" must be one of: \" + option.choices.join(\", \"), 1);\n  }\n\n  if (option.list) {\n    if (!options[name]) {\n      options[name] = [value];\n    }\n    else {\n      options[name].push(value);\n    }\n  }\n  else {\n    options[name] = value;\n  }\n};\n\n\n/* an arg is an item that's actually parsed from the command line\n   e.g. \"-l\", \"log.txt\", or \"--logfile=log.txt\" */\nvar Arg = function(str) {\n  var abbrRegex = /^\\-(\\w+?)$/,\n      fullRegex = /^\\-\\-(no\\-)?(.+?)(?:=(.+))?$/,\n      valRegex = /^[^\\-].*/;\n\n  var charMatch = abbrRegex.exec(str),\n      chars = charMatch && charMatch[1].split(\"\");\n\n  var fullMatch = fullRegex.exec(str),\n      full = fullMatch && fullMatch[2];\n\n  var isValue = str !== undefined && (str === \"\" || valRegex.test(str));\n  var value;\n  if (isValue) {\n    value = str;\n  }\n  else if (full) {\n    value = fullMatch[1] ? false : fullMatch[3];\n  }\n\n  return {\n    str: str,\n    chars: chars,\n    full: full,\n    value: value,\n    isValue: isValue\n  }\n}\n\n\n/* an opt is what's specified by the user in opts hash */\nvar Opt = function(opt) {\n  var strings = (opt.string || \"\").split(\",\"),\n      abbr, full, metavar;\n  for (var i = 0; i < strings.length; i++) {\n    var string = strings[i].trim(),\n        matches;\n    if (matches = string.match(/^\\-([^-])(?:\\s+(.*))?$/)) {\n      abbr = matches[1];\n      metavar = matches[2];\n    }\n    else if (matches = string.match(/^\\-\\-(.+?)(?:[=\\s]+(.+))?$/)) {\n      full = matches[1];\n      metavar = metavar || matches[2];\n    }\n  }\n\n  matches = matches || [];\n  var abbr = opt.abbr || abbr,   // e.g. v from -v\n      full = opt.full || full, // e.g. verbose from --verbose\n      metavar = opt.metavar || metavar;  // e.g. PATH from '--config=PATH'\n\n  var string;\n  if (opt.string) {\n    string = opt.string;\n  }\n  else if (opt.position === undefined) {\n    string = \"\";\n    if (abbr) {\n      string += \"-\" + abbr;\n      if (metavar)\n        string += \" \" + metavar\n      string += \", \";\n    }\n    string += \"--\" + (full || opt.name);\n    if (metavar) {\n      string += \" \" + metavar;\n    }\n  }\n\n  opt = _(opt).extend({\n    name: opt.name || full || abbr,\n    string: string,\n    abbr: abbr,\n    full: full,\n    metavar: metavar,\n    matches: function(arg) {\n      return opt.full == arg || opt.abbr == arg || opt.position == arg\n        || opt.name == arg || (opt.list && arg >= opt.position);\n    }\n  });\n  return opt;\n}\n\n\nvar createParser = function() {\n  return new ArgParser();\n}\n\nvar nomnom = createParser();\n\nfor (var i in nomnom) {\n  if (typeof nomnom[i] == \"function\") {\n     createParser[i] = _(nomnom[i]).bind(nomnom);\n  }\n}\n\nmodule.exports = createParser;\n"}